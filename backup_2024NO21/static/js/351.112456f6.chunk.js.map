{"version":3,"file":"static/js/351.112456f6.chunk.js","mappings":"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","sources":["components/Button.js","components/EntanglementBackground.js","components/AnimatedSubtitle.js","pages/Home.js","styles/Animations.js","../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js","../node_modules/react-typed/src/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { glowButtonStyles, subtleGlowStyles } from '../styles/Animations.js';\r\n\r\nconst StyledButton = styled.button`\r\n  /* Estilos base */\r\n  background: ${props => props.theme.colors.primary};\r\n  color: ${props => props.theme.colors.buttonText};\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n  \r\n  /* Tamaños */\r\n  padding: ${({ $size }) => $size === 'small' ? '0.5rem 1rem' : '0.75rem 1.5rem'};\r\n  font-size: ${({ $size }) => $size === 'medium' ? '0.875rem' : '1rem'};\r\n  min-width: ${({ $size }) => $size === 'large' ? '100px' : '150px'};\r\n  \r\n  /* Variantes */\r\n  background: ${({ $variant, theme }) =>\r\n    $variant === 'secondary'\r\n      ? theme.colors.secondaryBackground\r\n      : theme.colors.primary\r\n  };\r\n  \r\n  /* Efectos de resplandor */\r\n  ${({ $glow, $variant, $glowIntensity = 1 }) =>\r\n    $glow && $variant === 'primary' ? glowButtonStyles($glowIntensity) : ''}\r\n  ${({ $glow, $variant, $glowIntensity = 0.5 }) =>\r\n    $glow && $variant === 'secondary' ? subtleGlowStyles($glowIntensity) : ''}\r\n\r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(0);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    &:hover {\r\n      transform: none;\r\n      box-shadow: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = ({\r\n  children,\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  glow = false,\r\n  glowIntensity = 1, // Nueva prop para controlar la intensidad\r\n  ...props\r\n}) => {\r\n  return (\r\n    <StyledButton\r\n      $variant={variant}\r\n      $size={size}\r\n      $glow={glow}\r\n      $glowIntensity={glowIntensity}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;","import React, { useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CanvasContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: #000000;\r\n  z-index: 0;\r\n  will-change: transform;\r\n  transform: translateZ(0);\r\n`;\r\n\r\nconst Canvas = styled.canvas`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  transform: translateZ(0);\r\n  image-rendering: optimizeSpeed;\r\n`;\r\n\r\nconst EntanglementBackground = ({ priority = false }) => {\r\n  const canvasRef = useRef(null);\r\n  const animationFrameId = useRef(null);\r\n  const particles = useRef([]);\r\n  const isActive = useRef(true);\r\n  const lastTime = useRef(0);\r\n  const context = useRef(null);\r\n\r\n  const FPS = 30; // Reducido para mejor rendimiento\r\n  const frameDelay = 1000 / FPS;\r\n\r\n  const particleCount = useMemo(() => {\r\n    const isMobile = window.innerWidth < 768;\r\n    return isMobile ? 15 : 25; // Reducido para mejor rendimiento\r\n  }, []);\r\n\r\n  const initParticles = useCallback((width, height) => {\r\n    particles.current = Array.from({ length: particleCount }, () => ({\r\n      x: Math.random() * width,\r\n      y: Math.random() * height,\r\n      radius: Math.random() * 1.2 + 0.3,\r\n      vx: (Math.random() - 0.5) * 0.2,\r\n      vy: (Math.random() - 0.5) * 0.2,\r\n      connections: new Set(),\r\n    }));\r\n  }, [particleCount]);\r\n\r\n  const setupCanvas = useCallback(() => {\r\n    if (!canvasRef.current) return null;\r\n\r\n    const canvas = canvasRef.current;\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const rect = canvas.getBoundingClientRect();\r\n\r\n    canvas.width = rect.width * dpr;\r\n    canvas.height = rect.height * dpr;\r\n\r\n    const ctx = canvas.getContext('2d', {\r\n      alpha: false,\r\n      desynchronized: true,\r\n      willReadFrequently: false,\r\n    });\r\n\r\n    if (!ctx) return null;\r\n\r\n    ctx.scale(dpr, dpr);\r\n    context.current = ctx;\r\n\r\n    return { width: rect.width, height: rect.height };\r\n  }, []);\r\n\r\n  const animate = useCallback((timestamp) => {\r\n    if (!isActive.current) return;\r\n\r\n    const elapsed = timestamp - lastTime.current;\r\n    if (elapsed < frameDelay) {\r\n      animationFrameId.current = requestAnimationFrame(animate);\r\n      return;\r\n    }\r\n\r\n    lastTime.current = timestamp - (elapsed % frameDelay);\r\n    const ctx = context.current;\r\n    if (!ctx || !canvasRef.current) return;\r\n\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const width = rect.width;\r\n    const height = rect.height;\r\n\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n    ctx.lineWidth = 0.5;\r\n\r\n    particles.current.forEach((particle, i) => {\r\n      particle.x = (particle.x + particle.vx + width) % width;\r\n      particle.y = (particle.y + particle.vy + height) % height;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n      ctx.fill();\r\n\r\n      particle.connections.clear();\r\n\r\n      for (let j = i + 1; j < particles.current.length; j++) {\r\n        const other = particles.current[j];\r\n        const dx = Math.abs(particle.x - other.x);\r\n        const dy = Math.abs(particle.y - other.y);\r\n\r\n        if (dx > 150 || dy > 150) continue;\r\n\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance < 150) {\r\n          particle.connections.add(j);\r\n          const alpha = 1 - distance / 150;\r\n          if (alpha <= 0.1) continue;\r\n\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(other.x, other.y);\r\n          ctx.strokeStyle = `rgba(255, 255, 255, ${alpha})`;\r\n          ctx.stroke();\r\n        }\r\n      }\r\n    });\r\n\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n  }, [frameDelay]);\r\n\r\n  const handleResize = useCallback(() => {\r\n    if (animationFrameId.current) {\r\n      cancelAnimationFrame(animationFrameId.current);\r\n    }\r\n\r\n    const dimensions = setupCanvas();\r\n    if (dimensions) {\r\n      const { width, height } = dimensions;\r\n      initParticles(width, height);\r\n      lastTime.current = performance.now();\r\n      animate(lastTime.current);\r\n    }\r\n  }, [setupCanvas, initParticles, animate]);\r\n\r\n  useEffect(() => {\r\n    isActive.current = true;\r\n\r\n    const startAnimation = () => {\r\n      if (priority) {\r\n        handleResize();\r\n      } else {\r\n        requestIdleCallback(() => handleResize());\r\n      }\r\n    };\r\n\r\n    startAnimation();\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      if (isActive.current) {\r\n        if (priority) {\r\n          handleResize();\r\n        } else {\r\n          requestIdleCallback(() => handleResize());\r\n        }\r\n      }\r\n    });\r\n\r\n    if (canvasRef.current) {\r\n      resizeObserver.observe(canvasRef.current);\r\n    }\r\n\r\n    return () => {\r\n      isActive.current = false;\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [handleResize, priority]);\r\n\r\n  return (\r\n    <CanvasContainer>\r\n      <Canvas ref={canvasRef} />\r\n    </CanvasContainer>\r\n  );\r\n};\r\n\r\nexport default React.memo(EntanglementBackground);","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst SubtitleContainer = styled(motion.div)`\r\n  font-size: 2rem;\r\n  color: ${props => props.theme.colors.secondaryBackground};\r\n  line-height: 1.8;\r\n  max-width: 1200px;\r\n  margin: 3rem auto;\r\n  padding: 2rem;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 1.5rem;\r\n    padding: 1.5rem;\r\n    height: 120px;\r\n    margin: 2rem auto;\r\n  }\r\n`;\r\n\r\nconst TextWrapper = styled(motion.p)`\r\n  margin: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  padding: 3rem 3rem;\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  border: 1px solid ${props => props.theme.colors.secondaryBackground};\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\r\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst AnimatedSubtitle = () => {\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const { t } = useTranslation();\r\n\r\n    // Obtener los subtítulos traducidos\r\n    const subtitleTexts = [\r\n        t('home.subtitle.1'),\r\n        t('home.subtitle.2'),\r\n        t('home.subtitle.3'),\r\n        t('home.subtitle.4'),\r\n        t('home.subtitle.5')\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setCurrentIndex((prev) => (prev + 1) % subtitleTexts.length);\r\n        }, 5000);\r\n\r\n        return () => clearInterval(timer);\r\n    }, [subtitleTexts.length]);\r\n\r\n    return (\r\n        <SubtitleContainer>\r\n            <AnimatePresence mode=\"wait\">\r\n                <TextWrapper\r\n                    key={currentIndex}\r\n                    initial={{ opacity: 0, scale: 0.8 }}\r\n                    animate={{\r\n                        opacity: 1,\r\n                        scale: 1,\r\n                        transition: {\r\n                            duration: 0.7,\r\n                            ease: \"easeOut\"\r\n                        }\r\n                    }}\r\n                    exit={{\r\n                        opacity: 0,\r\n                        scale: 1.1,\r\n                        transition: {\r\n                            duration: 0.5,\r\n                            ease: \"easeIn\"\r\n                        }\r\n                    }}\r\n                >\r\n                    {subtitleTexts[currentIndex]}\r\n                </TextWrapper>\r\n            </AnimatePresence>\r\n        </SubtitleContainer>\r\n    );\r\n};\r\n\r\nexport default AnimatedSubtitle;","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ReactTyped } from 'react-typed';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport EntanglementBackground from '../components/EntanglementBackground.js';\nimport AnimatedSubtitle from '../components/AnimatedSubtitle.js';\nimport Button from '../components/Button.js';\n\n\n\n\n\nconst HomeContainer = styled.div`\n  position: relative;\n  min-height: 100vh;\n  overflow: hidden;\n`;\n\nconst HomeWrapper = styled(motion.div)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 120px);\n  padding: 2rem 20px;\n  box-sizing: border-box;\n  z-index: 1;\n  will-change: transform;\n`;\n\nconst ContentWrapper = styled(motion.div)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  gap: 4rem;\n`;\n\nconst Title = styled.h1`\n  font-size: clamp(2rem, 5vw, 4rem);\n  margin: 2rem 0 1rem;\n  line-height: 1.2;\n  letter-spacing: -0.02em;\n  text-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n  will-change: transform;\n  \n  .company-name {\n    color: #a5aa9a;\n  }\n  \n  .separator {\n    color: #00FFFF;\n  }\n\n  @media (max-width: 768px) {\n    margin: 1rem 0 0.5rem;\n  }\n`;\n\n\nconst StyledButton = styled(Button)`\n  transition: transform 0.3s ease;\n  will-change: transform;\n  \n  &:hover {\n    transform: translateY(-5px);\n  }\n  \n  @media (max-width: 768px) {\n    padding: 0.8rem 1.5rem;\n    font-size: 0.9rem;\n  }\n`;\n\nconst containerVariants = {\n  initial: { opacity: 0 },\n  animate: {\n    opacity: 1,\n    transition: {\n      duration: 0.5,\n      when: \"beforeChildren\",\n      staggerChildren: 0.2\n    }\n  },\n  exit: {\n    opacity: 0,\n    transition: {\n      duration: 0.3\n    }\n  }\n};\n\nconst itemVariants = {\n  initial: { y: 20, opacity: 0 },\n  animate: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.5,\n      ease: \"easeOut\"\n    }\n  },\n  exit: {\n    y: -20,\n    opacity: 0,\n    transition: {\n      duration: 0.3\n    }\n  }\n};\n\nconst Home = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const handleExploreClick = useCallback(() => {\n    const button = document.activeElement;\n    if (button) button.blur();\n    requestAnimationFrame(() => {\n      navigate('/services', { state: { fromHome: true } });\n    });\n  }, [navigate]);\n\n  return (\n    <HomeContainer>\n      <EntanglementBackground priority={false} />\n      <AnimatePresence mode=\"wait\">\n        <HomeWrapper\n          variants={containerVariants}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n        >\n          <ContentWrapper variants={itemVariants}>\n            <Title>\n              <ReactTyped\n                strings={[\n                  '<span style=\"color: #a5aa9a;\">Axion</span><span style=\"color: #00FFFF;\">Dev</span>'\n                ]}\n                typeSpeed={100}\n                showCursor={true}\n                cursorChar=\"|\"\n                html={true}\n              />\n            </Title>\n            <AnimatedSubtitle />\n            <StyledButton\n              variant=\"primary\"\n              glow={true}\n              animated\n              size=\"large\"\n              onClick={handleExploreClick}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              glowIntensity={1}\n            >\n              {t('home.exploreButton')}\n            </StyledButton>\n          </ContentWrapper>\n        </HomeWrapper>\n      </AnimatePresence>\n    </HomeContainer>\n  );\n};\n\nexport default React.memo(Home);","import { keyframes, css } from 'styled-components';\r\n\r\n// Animación de resplandor pulsante\r\nexport const glowPulse = keyframes`\r\n  0% { box-shadow: 0 0 5px rgba(255, 215, 0, 0.5), 0 0 10px rgba(255, 215, 0, 0.3); }\r\n  50% { box-shadow: 0 0 7px rgba(255, 215, 0, 0.8), 0 0 40px rgba(255, 215, 0, 0.5); }\r\n  100% { box-shadow: 0 0 5px rgba(255, 215, 0, 0.5), 0 0 10px rgba(255, 215, 0, 0.3); }\r\n`;\r\n\r\n// Animación sutil para el Captcha\r\nexport const floatAnimation = keyframes`\r\n  0% { transform: translateY(0); }\r\n  50% { transform: translateY(-6px); }\r\n  100% { transform: translateY(0); }\r\n`;\r\n\r\n// Convertir a función para mantener consistencia\r\nexport const floatingStyles = (intensity = 1) => css`\r\n  animation: ${floatAnimation} 2s infinite ease-in-out;\r\n  animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n  transform: translateY(0);\r\n  transition: all 0.3s ease;\r\n  \r\n  &:hover {\r\n    transform: translateY(${-3 * intensity}px);\r\n  }\r\n`;\r\n\r\n// Los otros estilos que ya convertimos a funciones\r\nexport const glowButtonStyles = (intensity = 1) => css`\r\n  animation: ${glowPulse} 2s infinite;\r\n  transition: all 0.3s ease;\r\n  \r\n  &:hover {\r\n    animation: none;\r\n    box-shadow: 0 0 ${12 * intensity}px rgba(255, 215, 0, 0.8), \r\n                0 0 ${50 * intensity}px rgba(255, 215, 0, 0.5);\r\n  }\r\n`;\r\n\r\nexport const subtleGlowStyles = (intensity = 0.5) => css`\r\n  animation: ${glowPulse} 3s infinite;\r\n  animation-delay: 0.5s;\r\n  \r\n  &:hover {\r\n    animation: none;\r\n    box-shadow: 0 0 ${15 * intensity}px rgba(255, 215, 0, 0.6), \r\n                0 0 ${30 * intensity}px rgba(255, 215, 0, 0.4);\r\n  }\r\n`;","/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n","import React, { memo, useMemo, useRef, useEffect } from \"react\";\nimport Typed from \"typed.js\";\nexport interface ReactTypedProps {\n  stopped?: boolean;\n  /**\n   * if true will be initialized in stopped state\n   * @default false\n   * */\n  startWhenVisible?: boolean;\n  /**\n   * Styles for the created element in case children is not provided\n   * */\n  style?: React.CSSProperties;\n  /**\n   * class name for the created element in case children is not provided\n   * */\n  className?: string;\n  /**\n   * In some custom component dom element is not in the ref.current property.\n   * ie an Input by antd the element is in input property ( ref.current.input )\n   * you can use this function to get the element from the ref\n   * @default (ref)=>ref.current\n   * */\n  parseRef?: (ref: React.RefObject<any>) => HTMLElement;\n  /**\n   * Returns the typed instance\n   * */\n  typedRef?: (typed: Typed) => void;\n  /**\n   * strings to be typed\n   * @default [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ]\n   * */\n  children?: React.ReactElement;\n  strings?: string[];\n  /**\n   * ID or instance of HTML element of element containing string children\n   * @default null\n   */\n  stringsElement?: string | Element;\n  /**\n   * type speed in milliseconds\n   * @default 0\n   */\n  typeSpeed?: number;\n  /**\n   * time before typing starts in milliseconds\n   * @default 0\n   */\n  startDelay?: number;\n  /**\n   * backspacing speed in milliseconds\n   * @default 0\n   */\n  backSpeed?: number;\n  /**\n   * only backspace what doesn't match the previous string\n   * @default true\n   */\n  smartBackspace?: boolean;\n  /**\n   * shuffle the strings\n   * @default true\n   */\n  shuffle?: boolean;\n  /**\n   * time before backspacing in milliseconds\n   * @default 700\n   */\n  backDelay?: number;\n  /**\n   * Fade out instead of backspace\n   * @default false\n   */\n  fadeOut?: boolean;\n  /**\n   * css class for fade animation\n   * @default typed-fade-out\n   */\n  fadeOutClass?: string;\n  /**\n   * Fade out delay in milliseconds\n   * @default 500\n   */\n  fadeOutDelay?: number;\n  /**\n   * loop strings\n   * @default false\n   */\n  loop?: boolean;\n  /**\n   * amount of loops\n   * @default Infinity\n   */\n  loopCount?: number;\n  /**\n   * show cursor\n   * @default true\n   */\n  showCursor?: boolean;\n  /**\n   * character for cursor\n   * @default |\n   */\n  cursorChar?: string;\n  /**\n   * insert CSS for cursor and fadeOut into HTML\n   * @default true\n   */\n  autoInsertCss?: boolean;\n  /**\n   * attribute for typing Ex: input placeholder, value, or just HTML text\n   * @default null\n   */\n  attr?: string;\n  /**\n   * bind to focus and blur if el is text input\n   * @default false\n   */\n  bindInputFocusEvents?: boolean;\n  /**\n   * 'html' or 'null' for plaintext\n   * @default html\n   */\n  contentType?: string;\n  /**\n   * Before it begins typing the first string\n   */\n  onBegin?: (self: Typed) => number;\n  /**\n   * All typing is complete\n   */\n  onComplete?(self: Typed): void;\n  /**\n   * Before each string is typed\n   */\n  preStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * After each string is typed\n   */\n  onStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * During looping, after last string is typed\n   */\n  onLastStringBackspaced?(self: Typed): void;\n  /**\n   * Typing has been stopped\n   */\n  onTypingPaused?(arrayPos: number, self: Typed): void;\n  /**\n   * Typing has been started after being stopped\n   */\n  onTypingResumed?(arrayPos: number, self: Typed): void;\n  /**\n   * After reset\n   */\n  onReset?(self: Typed): void;\n  /**\n   * After stop\n   */\n  onStop?(arrayPos: number, self: Typed): void;\n  /**\n   * After start\n   */\n  onStart?(arrayPos: number, self: Typed): void;\n  /**\n   * After destroy\n   */\n  onDestroy?(self: Typed): void;\n}\n\nexport const ReactTyped: React.FC<ReactTypedProps> = memo(\n  ({\n    style,\n    className,\n    typedRef,\n    parseRef,\n    stopped,\n    children,\n    startWhenVisible,\n    ...typedOptions\n  }) => {\n    const rootElement = useRef<any>(null);\n    const shouldUpdateArgs = useMemo(\n      () => [\n        ...Object.values(typedOptions).filter(\n          (v) =>\n            typeof v === \"boolean\" ||\n            typeof v === \"number\" ||\n            typeof v === \"string\"\n        ),\n        typedOptions.strings?.join(\",\"),\n      ],\n      [typedOptions]\n    );\n    useEffect(() => {\n      const element =\n        (parseRef && parseRef(rootElement)) || rootElement.current;\n      const typed = new Typed(element, { ...typedOptions });\n\n      if (stopped || startWhenVisible) {\n        typed?.stop();\n      }\n\n      if (startWhenVisible) {\n        const observer = new IntersectionObserver(([entry]) => {\n          if (entry.isIntersecting) {\n            typed?.start();\n            observer.disconnect();\n          }\n        });\n        observer.observe(element);\n      }\n\n      if (typedRef && typed) {\n        typedRef(typed);\n      }\n      return () => {\n        typed.destroy();\n      };\n    }, shouldUpdateArgs);\n\n    const child = !children ? (\n      <span style={style} className={className} ref={rootElement} />\n    ) : (\n      React.cloneElement(children, {\n        ref: rootElement,\n      })\n    );\n    return child;\n  }\n);\n\nexport { Typed };\n"],"names":["StyledButton","styled","button","props","theme","colors","primary","buttonText","_ref","$size","_ref2","_ref3","_ref4","$variant","secondaryBackground","_ref5","$glow","$glowIntensity","glowButtonStyles","_ref6","subtleGlowStyles","_ref7","children","variant","size","glow","glowIntensity","_jsx","CanvasContainer","div","Canvas","canvas","EntanglementBackground","priority","canvasRef","useRef","animationFrameId","particles","isActive","lastTime","context","frameDelay","particleCount","useMemo","window","innerWidth","initParticles","useCallback","width","height","current","Array","from","length","x","Math","random","y","radius","vx","vy","connections","Set","setupCanvas","dpr","devicePixelRatio","rect","getBoundingClientRect","ctx","getContext","alpha","desynchronized","willReadFrequently","scale","animate","timestamp","elapsed","requestAnimationFrame","fillStyle","fillRect","lineWidth","forEach","particle","i","beginPath","arc","PI","fill","clear","j","other","dx","abs","dy","distance","sqrt","add","moveTo","lineTo","strokeStyle","stroke","handleResize","cancelAnimationFrame","dimensions","performance","now","useEffect","requestIdleCallback","resizeObserver","ResizeObserver","observe","disconnect","ref","React","SubtitleContainer","motion","TextWrapper","p","AnimatedSubtitle","currentIndex","setCurrentIndex","useState","t","useTranslation","subtitleTexts","timer","setInterval","prev","clearInterval","AnimatePresence","mode","initial","opacity","transition","duration","ease","exit","HomeContainer","HomeWrapper","ContentWrapper","Title","h1","Button","containerVariants","when","staggerChildren","itemVariants","Home","navigate","useNavigate","handleExploreClick","document","activeElement","blur","state","fromHome","_jsxs","variants","ReactTyped","strings","typeSpeed","showCursor","cursorChar","html","animated","onClick","whileHover","whileTap","glowPulse","keyframes","floatAnimation","floatingStyles","intensity","arguments","undefined","css","s","stringsElement","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","onComplete","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","el","querySelector","options","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","style","cssText","r","slice","apply","o","a","push","innerHTML","u","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","arrayPos","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","createElement","setAttribute","body","appendChild","typeHtmlChars","substring","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","round","sort","className","addEventListener","insertBefore","nextSibling","memo","typedRef","parseRef","transformRef","stopped","startWhenVisible","typedOptions","rootElement","shouldUpdateArgs","Object","values","filter","v","join","element","typed","Typed","observer","IntersectionObserver","entry","isIntersecting","child"],"sourceRoot":""}