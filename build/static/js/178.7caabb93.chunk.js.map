{"version":3,"file":"static/js/178.7caabb93.chunk.js","mappings":"gMAOA,MAAMA,EAAkBC,EAAAA,GAAOC,GAAG;gBAClBC,GAASA,EAAMC,MAAMC,OAAOC;sBACtBH,GAASA,EAAMC,MAAMC,OAAOE;;;;;;;;;;EAY5CC,EAAiBP,EAAAA,GAAOC,GAAG;;;;;EAO3BO,EAAYR,EAAAA,GAAOS,EAAE;WAChBP,GAASA,EAAMC,MAAMC,OAAOM;;;EAKjCC,EAAWX,EAAAA,GAAOC,GAAG;;;;;;EAQrBW,GAAUZ,EAAAA,EAAAA,IAAOa,EAAAA,EAAOZ,IAAI;;;;;;;;gBAQlBC,GACRA,EAAMY,WACAZ,EAAMC,MAAMC,OAAOE,QACnBJ,EAAMa,WACFb,EAAMC,MAAMC,OAAOC,WAAa,KAChC;WAEPH,GACHA,EAAMY,WACAZ,EAAMC,MAAMC,OAAOC,WACnBH,EAAMa,WACFb,EAAMC,MAAMC,OAAOM,KAAO,KAC1BR,EAAMC,MAAMC,OAAOM;;YAGzBR,GAAUA,EAAMa,WAAa,cAAgB;;aAE5Cb,GAASA,EAAMa,WAAa,GAAM;;;kBAG7Bb,IACTA,EAAMa,YAAcb,EAAMC,MAAMC,OAAOY;;EAI1CC,EAAgBjB,EAAAA,GAAOC,GAAG;;;WAGrBC,GAASA,EAAMC,MAAMC,OAAOc;;EAMjCC,GAAoBnB,EAAAA,EAAAA,IAAOoB,EAAAA,EAAO;;;;;;;;;sBASlBlB,GAASA,EAAMC,MAAMC,OAAOc;WACvChB,GAASA,EAAMC,MAAMC,OAAOM;;;;;kBAKrBR,GAASA,EAAMC,MAAMC,OAAOc;;;;;;0BAMpBhB,GAASA,EAAMC,MAAMC,OAAOc;;;;;;;EAShDG,EAAWC,IAAgC,IAA/B,aAAEC,EAAY,QAAEC,GAASF,EACvC,MAAM,KAAEG,IAASC,EAAAA,EAAAA,OACVC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IAAIC,OAC5CC,EAAcC,IAAmBH,EAAAA,EAAAA,UAAS,MAE3CI,EAAc,IAAIH,KACpBH,EAAYO,cACZP,EAAYQ,WAAa,EACzB,GACFC,UAEIC,EAAkB,IAAIP,KACxBH,EAAYO,cACZP,EAAYQ,WACZ,GACFG,SAiBIC,EAAe,CACjBC,GAAI,CAAC,MAAO,MAAO,MAAO,SAAO,MAAO,MAAO,UAC/CC,GAAI,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC/CC,GAAI,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,WAG7CC,EAAWJ,EAAad,EAAKmB,WAAaL,EAAaC,GA2BvDK,EAAmBC,IACrB,MAAMf,EAAe,IAAID,KACrBH,EAAYO,cACZP,EAAYQ,WACZW,GAGAf,GAAgBP,IAChBQ,EAAgBD,GAChBR,EAAaQ,GACjB,EAGEgB,EAAkBD,IACpB,MAAME,EAAO,IAAIlB,KACbH,EAAYO,cACZP,EAAYQ,WACZW,GAOJ,OAHoC,IAAlBE,EAAKV,UAGHU,EAAOxB,CAAO,EAwCtC,OACIyB,EAAAA,EAAAA,MAAClD,EAAe,CAAAmD,SAAA,EACZD,EAAAA,EAAAA,MAAC1C,EAAc,CAAA2C,SAAA,EACXC,EAAAA,EAAAA,KAAChC,EAAiB,CACdiC,QAAQ,WACRC,QA9FSC,IACrBA,EAAEC,iBACFD,EAAEE,kBAEF5B,GAAe6B,IACX,MAAMC,EAAU,IAAI5B,KAAK2B,EAASvB,cAAeuB,EAAStB,WAAa,EAAG,GACpEwB,EAAQ,IAAI7B,KAGlB,OAFA6B,EAAMC,QAAQ,GACdD,EAAME,SAAS,EAAG,EAAG,EAAG,GACjBH,GAAWC,EAAQD,EAAUD,CAAQ,GAC9C,EAoFmCP,SAC5B,OAGDC,EAAAA,EAAAA,KAAC3C,EAAS,CAAA0C,SACL,GA1HE,CACfV,GAAI,CACA,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9C,QAAS,SAAU,aAAc,UAAW,YAAa,aAE7DC,GAAI,CACA,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE1DC,GAAI,CACA,UAAW,YAAa,WAAS,QAAS,OAAQ,QAClD,QAAS,SAAU,WAAY,UAAW,WAAY,aA+G/BjB,EAAKmB,UAAUjB,EAAYQ,eAAeR,EAAYO,mBAEzEiB,EAAAA,EAAAA,KAAChC,EAAiB,CACdiC,QAAQ,WACRC,QA1FSC,IACrBA,EAAEC,iBACFD,EAAEE,kBAEF5B,GAAe6B,IACX,MAAMC,EAAU,IAAI5B,KAAK2B,EAASvB,cAAeuB,EAAStB,WAAa,EAAG,GACpE2B,EAAU,IAAIhC,KAEpB,OADAgC,EAAQC,SAASD,EAAQ3B,WAAa,GAC/BuB,GAAWI,EAAUJ,EAAUD,CAAQ,GAChD,EAiFmCP,SAC5B,UAILD,EAAAA,EAAAA,MAACtC,EAAQ,CAAAuC,SAAA,CACJP,EAASqB,KAAIlB,IACVK,EAAAA,EAAAA,KAAClC,EAAa,CAAAiC,SAAYJ,GAANA,KA1DjBmB,MACf,MAAMC,EAAO,GAGb,IAAK,IAAIC,EAAI,EAAGA,EAAI9B,EAAiB8B,IACjCD,EAAKE,MAAKjB,EAAAA,EAAAA,KAACvC,EAAO,GAAM,SAASuD,MAIrC,IAAK,IAAIrB,EAAM,EAAGA,GAAOb,EAAaa,IAAO,CACzC,MAAME,EAAO,IAAIlB,KACbH,EAAYO,cACZP,EAAYQ,WACZW,GAGEhC,EAAaiB,GACfiB,EAAKqB,iBAAmBtC,EAAasC,eACnCtD,EAAagC,EAAeD,GAElCoB,EAAKE,MACDjB,EAAAA,EAAAA,KAACvC,EAAO,CAEJyC,QAASA,KAAOtC,GAAc8B,EAAgBC,GAC9ChC,WAAYA,EACZC,WAAYA,EACZuD,WAAavD,EAA8B,CAAC,EAAlB,CAAEwD,MAAO,KACnCC,SAAWzD,EAA+B,CAAC,EAAnB,CAAEwD,MAAO,KAAYrB,SAE5CJ,GAPIA,GAUjB,CAEA,OAAOoB,CAAI,EA0BFD,QAES,EAI1B5C,EAASoD,aAAe,CACpBjD,QAAS,IAAIM,MAGjB,S","sources":["components/Calendar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from './Button.js';\r\n\r\n\r\nconst CalendarWrapper = styled.div`\r\n  background: ${props => props.theme.colors.background};\r\n  border: 1px solid ${props => props.theme.colors.primary};\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  font-size: 0.8rem;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  margin: 0 auto;\r\n  margin-bottom: 2rem; // Agregar margen inferior\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CalendarHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst MonthYear = styled.h3`\r\n  color: ${props => props.theme.colors.text};\r\n  margin-bottom: 0.2rem;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst DaysGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  gap: 0.1rem;\r\n  flex-grow: 1;\r\n  padding: 0.1rem;\r\n`;\r\n\r\nconst DayCell = styled(motion.div)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  aspect-ratio: 1;\r\n  min-height: 10px; \r\n  min-width: 10px;  \r\n  padding: 0.1rem;\r\n  background: ${props =>\r\n        props.isSelected\r\n            ? props.theme.colors.primary\r\n            : props.isDisabled\r\n                ? props.theme.colors.background + '40'\r\n                : 'transparent'\r\n    };\r\n  color: ${props =>\r\n        props.isSelected\r\n            ? props.theme.colors.background\r\n            : props.isDisabled\r\n                ? props.theme.colors.text + '40'\r\n                : props.theme.colors.text\r\n    };\r\n  border-radius: 50%;\r\n  cursor: ${props => (props.isDisabled ? 'not-allowed' : 'pointer')};\r\n  font-size: 0.7rem;\r\n  opacity: ${props => props.isDisabled ? 0.5 : 1};\r\n  \r\n  &:hover {\r\n    background: ${props =>\r\n        !props.isDisabled && props.theme.colors.secondaryBackground};\r\n  }\r\n`;\r\n\r\nconst WeekdayHeader = styled.div`\r\n  text-align: center;\r\n  font-weight: bold;\r\n  color: ${props => props.theme.colors.accent};\r\n  font-size: 0.7rem;\r\n`;\r\n\r\n\r\n// Reemplazar el CalendarNavButton existente con:\r\nconst CalendarNavButton = styled(Button)`\r\n  /* Heredar los estilos base del botón pero ajustar el tamaño */\r\n  padding: 0.3rem;\r\n  min-width: 24px;\r\n  height: 24px;\r\n  font-size: 0.8rem;\r\n  \r\n  /* Ajustes específicos para el calendario */\r\n  background: transparent;\r\n  border: 1px solid ${props => props.theme.colors.accent}40;\r\n  color: ${props => props.theme.colors.text};\r\n  margin: 0;\r\n  \r\n  /* Modificar los efectos de hover para este caso específico */\r\n  &:hover::before {\r\n    background: ${props => props.theme.colors.accent}40;\r\n    animation: none;\r\n  }\r\n  \r\n  &:hover {\r\n    transform: translateY(0);\r\n    box-shadow: 0 0 8px ${props => props.theme.colors.accent}40;\r\n  }\r\n  \r\n  /* Mantener el efecto al hacer click pero más sutil */\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst Calendar = ({ onSelectDate, minDate }) => {\r\n    const { i18n } = useTranslation();\r\n    const [currentDate, setCurrentDate] = useState(new Date());\r\n    const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n    const daysInMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth() + 1,\r\n        0\r\n    ).getDate();\r\n\r\n    const firstDayOfMonth = new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        1\r\n    ).getDay();\r\n\r\n    const monthNames = {\r\n        es: [\r\n            \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\",\r\n            \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\r\n        ],\r\n        en: [\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ],\r\n        pt: [\r\n            \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\",\r\n            \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"\r\n        ]\r\n    };\r\n\r\n    const weekdaysText = {\r\n        es: [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"],\r\n        en: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n        pt: [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sáb\"]\r\n    };\r\n\r\n    const weekdays = weekdaysText[i18n.language] || weekdaysText.es;\r\n\r\n    const handlePrevMonth = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        setCurrentDate(prevDate => {\r\n            const newDate = new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1);\r\n            const today = new Date();\r\n            today.setDate(1); // Establecer al primer día del mes actual\r\n            today.setHours(0, 0, 0, 0);\r\n            return newDate >= today ? newDate : prevDate;\r\n        });\r\n    };\r\n\r\n    const handleNextMonth = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        setCurrentDate(prevDate => {\r\n            const newDate = new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1);\r\n            const maxDate = new Date();\r\n            maxDate.setMonth(maxDate.getMonth() + 3); // Permitir hasta 3 meses en adelante\r\n            return newDate <= maxDate ? newDate : prevDate;\r\n        });\r\n    };\r\n\r\n    const handleDateClick = (day) => {\r\n        const selectedDate = new Date(\r\n            currentDate.getFullYear(),\r\n            currentDate.getMonth(),\r\n            day\r\n        );\r\n\r\n        if (selectedDate >= minDate) {\r\n            setSelectedDate(selectedDate);\r\n            onSelectDate(selectedDate);\r\n        }\r\n    };\r\n\r\n    const isDateDisabled = (day) => {\r\n        const date = new Date(\r\n            currentDate.getFullYear(),\r\n            currentDate.getMonth(),\r\n            day\r\n        );\r\n\r\n        // Comprobar si es domingo (0 es domingo en JavaScript)\r\n        const isDomingo = date.getDay() === 0;\r\n\r\n        // Retornar true si es domingo O si la fecha es anterior a la fecha mínima\r\n        return isDomingo || date < minDate;\r\n    };\r\n\r\n    const renderDays = () => {\r\n        const days = [];\r\n\r\n        // Días vacíos al inicio del mes\r\n        for (let i = 0; i < firstDayOfMonth; i++) {\r\n            days.push(<DayCell key={`empty-${i}`} />);\r\n        }\r\n\r\n        // Días del mes\r\n        for (let day = 1; day <= daysInMonth; day++) {\r\n            const date = new Date(\r\n                currentDate.getFullYear(),\r\n                currentDate.getMonth(),\r\n                day\r\n            );\r\n\r\n            const isSelected = selectedDate &&\r\n                date.toDateString() === selectedDate.toDateString();\r\n            const isDisabled = isDateDisabled(day);\r\n\r\n            days.push(\r\n                <DayCell\r\n                    key={day}\r\n                    onClick={() => !isDisabled && handleDateClick(day)}\r\n                    isSelected={isSelected}\r\n                    isDisabled={isDisabled}\r\n                    whileHover={!isDisabled ? { scale: 1.1 } : {}}\r\n                    whileTap={!isDisabled ? { scale: 0.95 } : {}}\r\n                >\r\n                    {day}\r\n                </DayCell>\r\n            );\r\n        }\r\n\r\n        return days;\r\n    };\r\n\r\n    return (\r\n        <CalendarWrapper>\r\n            <CalendarHeader>\r\n                <CalendarNavButton\r\n                    variant=\"calendar\"\r\n                    onClick={handlePrevMonth}\r\n                >\r\n                    &lt;\r\n                </CalendarNavButton>\r\n                <MonthYear>\r\n                    {`${monthNames[i18n.language][currentDate.getMonth()]} ${currentDate.getFullYear()}`}\r\n                </MonthYear>\r\n                <CalendarNavButton\r\n                    variant=\"calendar\"\r\n                    onClick={handleNextMonth}\r\n                >\r\n                    &gt;\r\n                </CalendarNavButton>\r\n            </CalendarHeader>\r\n            <DaysGrid>\r\n                {weekdays.map(day => (\r\n                    <WeekdayHeader key={day}>{day}</WeekdayHeader>\r\n                ))}\r\n                {renderDays()}\r\n            </DaysGrid>\r\n        </CalendarWrapper>\r\n    );\r\n};\r\n\r\nCalendar.defaultProps = {\r\n    minDate: new Date()\r\n};\r\n\r\nexport default Calendar;"],"names":["CalendarWrapper","styled","div","props","theme","colors","background","primary","CalendarHeader","MonthYear","h3","text","DaysGrid","DayCell","motion","isSelected","isDisabled","secondaryBackground","WeekdayHeader","accent","CalendarNavButton","Button","Calendar","_ref","onSelectDate","minDate","i18n","useTranslation","currentDate","setCurrentDate","useState","Date","selectedDate","setSelectedDate","daysInMonth","getFullYear","getMonth","getDate","firstDayOfMonth","getDay","weekdaysText","es","en","pt","weekdays","language","handleDateClick","day","isDateDisabled","date","_jsxs","children","_jsx","variant","onClick","e","preventDefault","stopPropagation","prevDate","newDate","today","setDate","setHours","maxDate","setMonth","map","renderDays","days","i","push","toDateString","whileHover","scale","whileTap","defaultProps"],"sourceRoot":""}