{"version":3,"file":"static/js/351.f65dfeb9.chunk.js","mappings":"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","sources":["components/Button.js","components/EntanglementBackground.js","components/AnimatedSubtitle.js","pages/Home.js","../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js","../node_modules/react-typed/src/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\nimport { buttonBaseStyles, buttonSizes, buttonVariants } from '../styles/GlobalStyles.js';\r\n\r\n// Definir la animación del botón\r\nconst buttonAnimation = keyframes`\r\n  0% { transform: scale(1); box-shadow: 0 0 0 rgba(0, 255, 255, 0); }\r\n  50% { transform: scale(1.05); box-shadow: 0 0 20px rgba(0, 255, 255, 0.3); }\r\n  100% { transform: scale(1); box-shadow: 0 0 0 rgba(0, 255, 255, 0); }\r\n`;\r\n\r\n// Componente de botón estilizado\r\nconst StyledButton = styled.button`\r\n  ${buttonBaseStyles}\r\n  ${props => buttonSizes[props.size || 'medium']}\r\n  ${props => buttonVariants[props.variant || 'primary']}\r\n  ${props => props.customStyle}\r\n\r\n  ${props => props.$isAnimated && css`\r\n    animation: ${buttonAnimation} 2s infinite ease-in-out;\r\n  `}\r\n\r\n  ${props => props.fullWidth && css`\r\n    width: 100%;\r\n  `}\r\n\r\n  ${props => props.type === 'submit' && css`\r\n    margin-left: auto;\r\n  `}\r\n\r\n  ${props => props.variant === 'clear' && css`\r\n    background: ${props => props.theme.colors.secondaryBackground};\r\n    &:hover {\r\n      background: ${props => props.theme.colors.secondaryBackground};\r\n      opacity: 0.8;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Button = ({\r\n  children,\r\n  variant = 'primary',\r\n  size = 'medium',\r\n  animated = false,\r\n  className = '',\r\n  customStyle,\r\n  fullWidth = false,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <StyledButton\r\n      $variant={variant}\r\n      $isAnimated={animated}\r\n      size={size}\r\n      className={className}\r\n      customStyle={customStyle}\r\n      fullWidth={fullWidth}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;","import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BackgroundWrapper = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: #000000;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Canvas = styled.canvas`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst EntanglementBackground = () => {\r\n  const canvasRef = useRef(null);\r\n  const animationFrameId = useRef(null);\r\n  const particles = useRef([]);\r\n\r\n  const initParticles = (width, height) => {\r\n    const particleCount = 50;\r\n    particles.current = [];\r\n    \r\n    for (let i = 0; i < particleCount; i++) {\r\n      particles.current.push({\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n        radius: Math.random() * 1.5 + 0.5,\r\n        vx: (Math.random() - 0.5) * 0.5,\r\n        vy: (Math.random() - 0.5) * 0.5,\r\n      });\r\n    }\r\n  };\r\n\r\n  const resizeCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const displayWidth = window.innerWidth;\r\n    const displayHeight = window.innerHeight;\r\n\r\n    canvas.width = displayWidth * dpr;\r\n    canvas.height = displayHeight * dpr;\r\n    canvas.style.width = `${displayWidth}px`;\r\n    canvas.style.height = `${displayHeight}px`;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    ctx.scale(dpr, dpr);\r\n    initParticles(displayWidth, displayHeight);\r\n  };\r\n\r\n  const animate = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const maxDistance = 150;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    particles.current.forEach(particle => {\r\n      particle.x += particle.vx;\r\n      particle.y += particle.vy;\r\n\r\n      if (particle.x < 0 || particle.x > window.innerWidth) particle.vx *= -1;\r\n      if (particle.y < 0 || particle.y > window.innerHeight) particle.vy *= -1;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.fill();\r\n\r\n      particles.current.forEach(otherParticle => {\r\n        const dx = particle.x - otherParticle.x;\r\n        const dy = particle.y - otherParticle.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        if (distance < maxDistance) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(particle.x, particle.y);\r\n          ctx.lineTo(otherParticle.x, otherParticle.y);\r\n          ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n          ctx.lineWidth = 0.2;\r\n          ctx.stroke();\r\n        }\r\n      });\r\n    });\r\n\r\n    animationFrameId.current = requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isComponentMounted = true;\r\n\r\n    const handleResize = () => {\r\n      if (!isComponentMounted) return;\r\n\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n      resizeCanvas();\r\n      animate();\r\n    };\r\n\r\n    // Pequeño retraso para asegurar que el canvas esté montado\r\n    setTimeout(() => {\r\n      if (isComponentMounted) {\r\n        resizeCanvas();\r\n        animate();\r\n      }\r\n    }, 0);\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      isComponentMounted = false;\r\n      if (animationFrameId.current) {\r\n        cancelAnimationFrame(animationFrameId.current);\r\n      }\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <BackgroundWrapper>\r\n      <Canvas ref={canvasRef} />\r\n    </BackgroundWrapper>\r\n  );\r\n};\r\n\r\nexport default EntanglementBackground;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst SubtitleContainer = styled(motion.div)`\r\n  font-size: 2rem;\r\n  color: ${props => props.theme.colors.secondaryBackground};\r\n  line-height: 1.8;\r\n  max-width: 1200px;\r\n  margin: 3rem auto; // Aumentamos el margen vertical\r\n  padding: 2rem;\r\n  height: 100px; // Reducimos un poco la altura\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 1.5rem;\r\n    padding: 1.5rem;\r\n    height: 120px;\r\n    margin: 2rem auto;\r\n  }\r\n`;\r\n\r\nconst TextWrapper = styled(motion.p)`\r\n  margin: 0;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  padding: 3rem 3rem;\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  border: 1px solid ${props => props.theme.colors.secondaryBackground};\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\r\n  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst subtitleTexts = [\r\n    \"🎯 Desarrollo de sitios web modernos y accesibles para pequeños y medianos negocios\",\r\n    \"💻 Desarrollo y diseño de landing pages atractivas y optimizadas\",\r\n    \"⚡ Mantenimiento y actualizaciones de sitios web WordPress\",\r\n    \"📱 Diseño responsivo para una experiencia perfecta en todos los dispositivos\",\r\n    \"🔍 Implementación de SEO para mejorar tu visibilidad online\"\r\n];\r\n\r\n\r\nconst AnimatedSubtitle = () => {\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setCurrentIndex((prev) => (prev + 1) % subtitleTexts.length);\r\n        }, 5000); // Aumentamos el tiempo a 5 segundos\r\n\r\n        return () => clearInterval(timer);\r\n    }, []);\r\n\r\n    return (\r\n        <SubtitleContainer>\r\n            <AnimatePresence mode=\"wait\">\r\n                <TextWrapper\r\n                    key={currentIndex}\r\n                    initial={{ opacity: 0, scale: 0.8 }} // Cambiamos la animación inicial\r\n                    animate={{\r\n                        opacity: 1,\r\n                        scale: 1,\r\n                        transition: {\r\n                            duration: 0.7,\r\n                            ease: \"easeOut\"\r\n                        }\r\n                    }}\r\n                    exit={{\r\n                        opacity: 0,\r\n                        scale: 1.1, // Efecto de zoom out al salir\r\n                        transition: {\r\n                            duration: 0.5,\r\n                            ease: \"easeIn\"\r\n                        }\r\n                    }}\r\n                >\r\n                    {subtitleTexts[currentIndex]}\r\n                </TextWrapper>\r\n            </AnimatePresence>\r\n        </SubtitleContainer>\r\n    );\r\n};\r\n\r\nexport default AnimatedSubtitle;","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { ReactTyped } from 'react-typed';\nimport EntanglementBackground from '../components/EntanglementBackground.js';\nimport AnimatedSubtitle from '../components/AnimatedSubtitle.js';\nimport Button from '../components/Button.js';\n\nconst HomeWrapper = styled(motion.div)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: calc(100vh - 120px);\n  padding: 2rem 20px;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst ContentWrapper = styled(motion.div)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  gap: 3.5rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 4rem;\n  margin-top: 2rem;\n  margin-bottom: 1rem;\n  \n  @media (max-width: 768px) {\n    font-size: 3rem;\n  }\n`;\n\n\nconst BackgroundWrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 0;\n`;\n\nconst Home = () => {\n  const [isAccelerating, setIsAccelerating] = useState(false);\n  const navigate = useNavigate();\n\n  const handleExploreClick = () => {\n    setIsAccelerating(true);\n    setTimeout(() => {\n      navigate('/services');\n    }, 1000);\n  };\n\n  return (\n    <>\n      <BackgroundWrapper>\n        <EntanglementBackground />\n      </BackgroundWrapper>\n      <HomeWrapper>\n        <ContentWrapper>\n          <Title>\n            <ReactTyped\n              strings={['<span style=\"color: #a5aa9a;\">Axion</span><span style=\"color: #00FFFF;\">Dev</span>']}\n              typeSpeed={100}\n              showCursor={true}\n              cursorChar=\"|\"\n              html={true}\n            />\n          </Title>\n          <AnimatedSubtitle />\n          <Button\n            animated\n            onClick={handleExploreClick}\n            className=\"home-button\" \n          >\n            Descubre más\n          </Button>\n        </ContentWrapper>\n      </HomeWrapper>\n    </>\n  );\n};\n\nexport default Home;","/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n","import React, { memo, useMemo, useRef, useEffect } from \"react\";\nimport Typed from \"typed.js\";\nexport interface ReactTypedProps {\n  stopped?: boolean;\n  /**\n   * if true will be initialized in stopped state\n   * @default false\n   * */\n  startWhenVisible?: boolean;\n  /**\n   * Styles for the created element in case children is not provided\n   * */\n  style?: React.CSSProperties;\n  /**\n   * class name for the created element in case children is not provided\n   * */\n  className?: string;\n  /**\n   * In some custom component dom element is not in the ref.current property.\n   * ie an Input by antd the element is in input property ( ref.current.input )\n   * you can use this function to get the element from the ref\n   * @default (ref)=>ref.current\n   * */\n  parseRef?: (ref: React.RefObject<any>) => HTMLElement;\n  /**\n   * Returns the typed instance\n   * */\n  typedRef?: (typed: Typed) => void;\n  /**\n   * strings to be typed\n   * @default [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ]\n   * */\n  children?: React.ReactElement;\n  strings?: string[];\n  /**\n   * ID or instance of HTML element of element containing string children\n   * @default null\n   */\n  stringsElement?: string | Element;\n  /**\n   * type speed in milliseconds\n   * @default 0\n   */\n  typeSpeed?: number;\n  /**\n   * time before typing starts in milliseconds\n   * @default 0\n   */\n  startDelay?: number;\n  /**\n   * backspacing speed in milliseconds\n   * @default 0\n   */\n  backSpeed?: number;\n  /**\n   * only backspace what doesn't match the previous string\n   * @default true\n   */\n  smartBackspace?: boolean;\n  /**\n   * shuffle the strings\n   * @default true\n   */\n  shuffle?: boolean;\n  /**\n   * time before backspacing in milliseconds\n   * @default 700\n   */\n  backDelay?: number;\n  /**\n   * Fade out instead of backspace\n   * @default false\n   */\n  fadeOut?: boolean;\n  /**\n   * css class for fade animation\n   * @default typed-fade-out\n   */\n  fadeOutClass?: string;\n  /**\n   * Fade out delay in milliseconds\n   * @default 500\n   */\n  fadeOutDelay?: number;\n  /**\n   * loop strings\n   * @default false\n   */\n  loop?: boolean;\n  /**\n   * amount of loops\n   * @default Infinity\n   */\n  loopCount?: number;\n  /**\n   * show cursor\n   * @default true\n   */\n  showCursor?: boolean;\n  /**\n   * character for cursor\n   * @default |\n   */\n  cursorChar?: string;\n  /**\n   * insert CSS for cursor and fadeOut into HTML\n   * @default true\n   */\n  autoInsertCss?: boolean;\n  /**\n   * attribute for typing Ex: input placeholder, value, or just HTML text\n   * @default null\n   */\n  attr?: string;\n  /**\n   * bind to focus and blur if el is text input\n   * @default false\n   */\n  bindInputFocusEvents?: boolean;\n  /**\n   * 'html' or 'null' for plaintext\n   * @default html\n   */\n  contentType?: string;\n  /**\n   * Before it begins typing the first string\n   */\n  onBegin?: (self: Typed) => number;\n  /**\n   * All typing is complete\n   */\n  onComplete?(self: Typed): void;\n  /**\n   * Before each string is typed\n   */\n  preStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * After each string is typed\n   */\n  onStringTyped?(arrayPos: number, self: Typed): void;\n  /**\n   * During looping, after last string is typed\n   */\n  onLastStringBackspaced?(self: Typed): void;\n  /**\n   * Typing has been stopped\n   */\n  onTypingPaused?(arrayPos: number, self: Typed): void;\n  /**\n   * Typing has been started after being stopped\n   */\n  onTypingResumed?(arrayPos: number, self: Typed): void;\n  /**\n   * After reset\n   */\n  onReset?(self: Typed): void;\n  /**\n   * After stop\n   */\n  onStop?(arrayPos: number, self: Typed): void;\n  /**\n   * After start\n   */\n  onStart?(arrayPos: number, self: Typed): void;\n  /**\n   * After destroy\n   */\n  onDestroy?(self: Typed): void;\n}\n\nexport const ReactTyped: React.FC<ReactTypedProps> = memo(\n  ({\n    style,\n    className,\n    typedRef,\n    parseRef,\n    stopped,\n    children,\n    startWhenVisible,\n    ...typedOptions\n  }) => {\n    const rootElement = useRef<any>(null);\n    const shouldUpdateArgs = useMemo(\n      () => [\n        ...Object.values(typedOptions).filter(\n          (v) =>\n            typeof v === \"boolean\" ||\n            typeof v === \"number\" ||\n            typeof v === \"string\"\n        ),\n        typedOptions.strings?.join(\",\"),\n      ],\n      [typedOptions]\n    );\n    useEffect(() => {\n      const element =\n        (parseRef && parseRef(rootElement)) || rootElement.current;\n      const typed = new Typed(element, { ...typedOptions });\n\n      if (stopped || startWhenVisible) {\n        typed?.stop();\n      }\n\n      if (startWhenVisible) {\n        const observer = new IntersectionObserver(([entry]) => {\n          if (entry.isIntersecting) {\n            typed?.start();\n            observer.disconnect();\n          }\n        });\n        observer.observe(element);\n      }\n\n      if (typedRef && typed) {\n        typedRef(typed);\n      }\n      return () => {\n        typed.destroy();\n      };\n    }, shouldUpdateArgs);\n\n    const child = !children ? (\n      <span style={style} className={className} ref={rootElement} />\n    ) : (\n      React.cloneElement(children, {\n        ref: rootElement,\n      })\n    );\n    return child;\n  }\n);\n\nexport { Typed };\n"],"names":["buttonAnimation","keyframes","StyledButton","styled","button","buttonBaseStyles","props","buttonSizes","size","buttonVariants","variant","customStyle","$isAnimated","css","fullWidth","type","theme","colors","secondaryBackground","_ref","children","animated","className","_jsx","$variant","BackgroundWrapper","div","Canvas","canvas","EntanglementBackground","canvasRef","useRef","animationFrameId","particles","resizeCanvas","current","dpr","window","devicePixelRatio","displayWidth","innerWidth","displayHeight","innerHeight","width","height","style","ctx","getContext","scale","initParticles","i","push","x","Math","random","y","radius","vx","vy","animate","clearRect","forEach","particle","beginPath","arc","PI","fillStyle","fill","otherParticle","dx","dy","distance","sqrt","moveTo","lineTo","strokeStyle","lineWidth","stroke","requestAnimationFrame","useEffect","isComponentMounted","handleResize","cancelAnimationFrame","setTimeout","addEventListener","removeEventListener","ref","SubtitleContainer","motion","TextWrapper","p","subtitleTexts","AnimatedSubtitle","currentIndex","setCurrentIndex","useState","timer","setInterval","prev","length","clearInterval","AnimatePresence","mode","initial","opacity","transition","duration","ease","exit","HomeWrapper","ContentWrapper","Title","h1","Home","isAccelerating","setIsAccelerating","navigate","useNavigate","_jsxs","_Fragment","ReactTyped","strings","typeSpeed","showCursor","cursorChar","html","Button","onClick","handleExploreClick","s","stringsElement","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","t","onComplete","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","el","document","querySelector","options","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","cssText","r","Array","slice","apply","o","a","innerHTML","u","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","arrayPos","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","createElement","setAttribute","body","appendChild","typeHtmlChars","substring","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","add","round","sort","insertBefore","nextSibling","memo","typedRef","parseRef","transformRef","stopped","startWhenVisible","typedOptions","rootElement","shouldUpdateArgs","useMemo","Object","values","filter","v","join","element","typed","Typed","observer","IntersectionObserver","_ref2","entry","isIntersecting","disconnect","observe","child","React"],"sourceRoot":""}