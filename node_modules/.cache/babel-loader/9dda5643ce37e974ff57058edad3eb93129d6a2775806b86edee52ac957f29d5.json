{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nexport const useAnimationController = () => {\n  _s();\n  // Añadimos el estado para controlar si la animación ya ocurrió\n  const [shouldAnimate, setShouldAnimate] = useState(false);\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [isReducedMotion, setIsReducedMotion] = useState(false);\n  const [devicePerformance, setDevicePerformance] = useState('high');\n  useEffect(() => {\n    // Detectar preferencias de reducción de movimiento\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setIsReducedMotion(mediaQuery.matches);\n\n    // Evaluar performance del dispositivo\n    const evaluatePerformance = () => {\n      var _navigator, _navigator2;\n      const memory = ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.deviceMemory) || 4;\n      const cores = ((_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.hardwareConcurrency) || 4;\n      if (memory <= 2 || cores <= 2) return 'low';\n      if (memory <= 4 || cores <= 4) return 'medium';\n      return 'high';\n    };\n    setDevicePerformance(evaluatePerformance());\n\n    // Activar animaciones solo después de la carga inicial\n    const timer = setTimeout(() => {\n      setShouldAnimate(true);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Función para marcar que una animación se ha completado\n  const completeAnimation = () => {\n    setHasAnimated(true);\n  };\n\n  // Determinar qué nivel de animaciones usar\n  const getAnimationConfig = () => {\n    if (isReducedMotion) return 'minimal';\n    if (devicePerformance === 'low') return 'reduced';\n    if (devicePerformance === 'medium') return 'balanced';\n    return 'full';\n  };\n  return {\n    shouldAnimate,\n    hasAnimated,\n    completeAnimation,\n    animationLevel: getAnimationConfig(),\n    isReducedMotion,\n    devicePerformance\n  };\n};\n_s(useAnimationController, \"kYf4Dah+wfddJyRDPs/OQBGi0UI=\");","map":{"version":3,"names":["useEffect","useState","useAnimationController","_s","shouldAnimate","setShouldAnimate","hasAnimated","setHasAnimated","isReducedMotion","setIsReducedMotion","devicePerformance","setDevicePerformance","mediaQuery","window","matchMedia","matches","evaluatePerformance","_navigator","_navigator2","memory","navigator","deviceMemory","cores","hardwareConcurrency","timer","setTimeout","clearTimeout","completeAnimation","getAnimationConfig","animationLevel"],"sources":["C:/Users/roman/OneDrive/Escritorio/Programador/QWS/Quantum Web Services/quantum-web-services/src/utils/animationController.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useAnimationController = () => {\n    // Añadimos el estado para controlar si la animación ya ocurrió\n    const [shouldAnimate, setShouldAnimate] = useState(false);\n    const [hasAnimated, setHasAnimated] = useState(false);\n    const [isReducedMotion, setIsReducedMotion] = useState(false);\n    const [devicePerformance, setDevicePerformance] = useState('high');\n\n    useEffect(() => {\n        // Detectar preferencias de reducción de movimiento\n        const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n        setIsReducedMotion(mediaQuery.matches);\n\n        // Evaluar performance del dispositivo\n        const evaluatePerformance = () => {\n            const memory = navigator?.deviceMemory || 4;\n            const cores = navigator?.hardwareConcurrency || 4;\n            \n            if (memory <= 2 || cores <= 2) return 'low';\n            if (memory <= 4 || cores <= 4) return 'medium';\n            return 'high';\n        };\n\n        setDevicePerformance(evaluatePerformance());\n\n        // Activar animaciones solo después de la carga inicial\n        const timer = setTimeout(() => {\n            setShouldAnimate(true);\n        }, 1000);\n\n        return () => clearTimeout(timer);\n    }, []);\n\n    // Función para marcar que una animación se ha completado\n    const completeAnimation = () => {\n        setHasAnimated(true);\n    };\n\n    // Determinar qué nivel de animaciones usar\n    const getAnimationConfig = () => {\n        if (isReducedMotion) return 'minimal';\n        if (devicePerformance === 'low') return 'reduced';\n        if (devicePerformance === 'medium') return 'balanced';\n        return 'full';\n    };\n\n    return {\n        shouldAnimate,\n        hasAnimated,\n        completeAnimation,\n        animationLevel: getAnimationConfig(),\n        isReducedMotion,\n        devicePerformance\n    };\n};"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EAElED,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,UAAU,GAAGC,MAAM,CAACC,UAAU,CAAC,kCAAkC,CAAC;IACxEL,kBAAkB,CAACG,UAAU,CAACG,OAAO,CAAC;;IAEtC;IACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;MAAA,IAAAC,UAAA,EAAAC,WAAA;MAC9B,MAAMC,MAAM,GAAG,EAAAF,UAAA,GAAAG,SAAS,cAAAH,UAAA,uBAATA,UAAA,CAAWI,YAAY,KAAI,CAAC;MAC3C,MAAMC,KAAK,GAAG,EAAAJ,WAAA,GAAAE,SAAS,cAAAF,WAAA,uBAATA,WAAA,CAAWK,mBAAmB,KAAI,CAAC;MAEjD,IAAIJ,MAAM,IAAI,CAAC,IAAIG,KAAK,IAAI,CAAC,EAAE,OAAO,KAAK;MAC3C,IAAIH,MAAM,IAAI,CAAC,IAAIG,KAAK,IAAI,CAAC,EAAE,OAAO,QAAQ;MAC9C,OAAO,MAAM;IACjB,CAAC;IAEDX,oBAAoB,CAACK,mBAAmB,CAAC,CAAC,CAAC;;IAE3C;IACA,MAAMQ,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC3BpB,gBAAgB,CAAC,IAAI,CAAC;IAC1B,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMqB,YAAY,CAACF,KAAK,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC5BpB,cAAc,CAAC,IAAI,CAAC;EACxB,CAAC;;EAED;EACA,MAAMqB,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,IAAIpB,eAAe,EAAE,OAAO,SAAS;IACrC,IAAIE,iBAAiB,KAAK,KAAK,EAAE,OAAO,SAAS;IACjD,IAAIA,iBAAiB,KAAK,QAAQ,EAAE,OAAO,UAAU;IACrD,OAAO,MAAM;EACjB,CAAC;EAED,OAAO;IACHN,aAAa;IACbE,WAAW;IACXqB,iBAAiB;IACjBE,cAAc,EAAED,kBAAkB,CAAC,CAAC;IACpCpB,eAAe;IACfE;EACJ,CAAC;AACL,CAAC;AAACP,EAAA,CArDWD,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}