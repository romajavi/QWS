{"ast":null,"code":"import{useEffect,useState}from'react';export const useAnimationController=()=>{// Añadimos el estado para controlar si la animación ya ocurrió\nconst[shouldAnimate,setShouldAnimate]=useState(false);const[hasAnimated,setHasAnimated]=useState(false);const[isReducedMotion,setIsReducedMotion]=useState(false);const[devicePerformance,setDevicePerformance]=useState('high');useEffect(()=>{// Detectar preferencias de reducción de movimiento\nconst mediaQuery=window.matchMedia('(prefers-reduced-motion: reduce)');setIsReducedMotion(mediaQuery.matches);// Evaluar performance del dispositivo\nconst evaluatePerformance=()=>{var _navigator,_navigator2;const memory=((_navigator=navigator)===null||_navigator===void 0?void 0:_navigator.deviceMemory)||4;const cores=((_navigator2=navigator)===null||_navigator2===void 0?void 0:_navigator2.hardwareConcurrency)||4;if(memory<=2||cores<=2)return'low';if(memory<=4||cores<=4)return'medium';return'high';};setDevicePerformance(evaluatePerformance());// Activar animaciones solo después de la carga inicial\nconst timer=setTimeout(()=>{setShouldAnimate(true);},1000);return()=>clearTimeout(timer);},[]);// Función para marcar que una animación se ha completado\nconst completeAnimation=()=>{setHasAnimated(true);};// Determinar qué nivel de animaciones usar\nconst getAnimationConfig=()=>{if(isReducedMotion)return'minimal';if(devicePerformance==='low')return'reduced';if(devicePerformance==='medium')return'balanced';return'full';};return{shouldAnimate,hasAnimated,completeAnimation,animationLevel:getAnimationConfig(),isReducedMotion,devicePerformance};};","map":{"version":3,"names":["useEffect","useState","useAnimationController","shouldAnimate","setShouldAnimate","hasAnimated","setHasAnimated","isReducedMotion","setIsReducedMotion","devicePerformance","setDevicePerformance","mediaQuery","window","matchMedia","matches","evaluatePerformance","_navigator","_navigator2","memory","navigator","deviceMemory","cores","hardwareConcurrency","timer","setTimeout","clearTimeout","completeAnimation","getAnimationConfig","animationLevel"],"sources":["C:/Users/roman/OneDrive/Escritorio/Programador/QWS/Quantum Web Services/quantum-web-services/src/utils/animationController.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport const useAnimationController = () => {\r\n    // Añadimos el estado para controlar si la animación ya ocurrió\r\n    const [shouldAnimate, setShouldAnimate] = useState(false);\r\n    const [hasAnimated, setHasAnimated] = useState(false);\r\n    const [isReducedMotion, setIsReducedMotion] = useState(false);\r\n    const [devicePerformance, setDevicePerformance] = useState('high');\r\n\r\n    useEffect(() => {\r\n        // Detectar preferencias de reducción de movimiento\r\n        const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\r\n        setIsReducedMotion(mediaQuery.matches);\r\n\r\n        // Evaluar performance del dispositivo\r\n        const evaluatePerformance = () => {\r\n            const memory = navigator?.deviceMemory || 4;\r\n            const cores = navigator?.hardwareConcurrency || 4;\r\n            \r\n            if (memory <= 2 || cores <= 2) return 'low';\r\n            if (memory <= 4 || cores <= 4) return 'medium';\r\n            return 'high';\r\n        };\r\n\r\n        setDevicePerformance(evaluatePerformance());\r\n\r\n        // Activar animaciones solo después de la carga inicial\r\n        const timer = setTimeout(() => {\r\n            setShouldAnimate(true);\r\n        }, 1000);\r\n\r\n        return () => clearTimeout(timer);\r\n    }, []);\r\n\r\n    // Función para marcar que una animación se ha completado\r\n    const completeAnimation = () => {\r\n        setHasAnimated(true);\r\n    };\r\n\r\n    // Determinar qué nivel de animaciones usar\r\n    const getAnimationConfig = () => {\r\n        if (isReducedMotion) return 'minimal';\r\n        if (devicePerformance === 'low') return 'reduced';\r\n        if (devicePerformance === 'medium') return 'balanced';\r\n        return 'full';\r\n    };\r\n\r\n    return {\r\n        shouldAnimate,\r\n        hasAnimated,\r\n        completeAnimation,\r\n        animationLevel: getAnimationConfig(),\r\n        isReducedMotion,\r\n        devicePerformance\r\n    };\r\n};"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,MAAO,MAAM,CAAAC,sBAAsB,CAAGA,CAAA,GAAM,CACxC;AACA,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGH,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAACI,WAAW,CAAEC,cAAc,CAAC,CAAGL,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACM,eAAe,CAAEC,kBAAkB,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACQ,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGT,QAAQ,CAAC,MAAM,CAAC,CAElED,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAW,UAAU,CAAGC,MAAM,CAACC,UAAU,CAAC,kCAAkC,CAAC,CACxEL,kBAAkB,CAACG,UAAU,CAACG,OAAO,CAAC,CAEtC;AACA,KAAM,CAAAC,mBAAmB,CAAGA,CAAA,GAAM,KAAAC,UAAA,CAAAC,WAAA,CAC9B,KAAM,CAAAC,MAAM,CAAG,EAAAF,UAAA,CAAAG,SAAS,UAAAH,UAAA,iBAATA,UAAA,CAAWI,YAAY,GAAI,CAAC,CAC3C,KAAM,CAAAC,KAAK,CAAG,EAAAJ,WAAA,CAAAE,SAAS,UAAAF,WAAA,iBAATA,WAAA,CAAWK,mBAAmB,GAAI,CAAC,CAEjD,GAAIJ,MAAM,EAAI,CAAC,EAAIG,KAAK,EAAI,CAAC,CAAE,MAAO,KAAK,CAC3C,GAAIH,MAAM,EAAI,CAAC,EAAIG,KAAK,EAAI,CAAC,CAAE,MAAO,QAAQ,CAC9C,MAAO,MAAM,CACjB,CAAC,CAEDX,oBAAoB,CAACK,mBAAmB,CAAC,CAAC,CAAC,CAE3C;AACA,KAAM,CAAAQ,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC3BpB,gBAAgB,CAAC,IAAI,CAAC,CAC1B,CAAC,CAAE,IAAI,CAAC,CAER,MAAO,IAAMqB,YAAY,CAACF,KAAK,CAAC,CACpC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,iBAAiB,CAAGA,CAAA,GAAM,CAC5BpB,cAAc,CAAC,IAAI,CAAC,CACxB,CAAC,CAED;AACA,KAAM,CAAAqB,kBAAkB,CAAGA,CAAA,GAAM,CAC7B,GAAIpB,eAAe,CAAE,MAAO,SAAS,CACrC,GAAIE,iBAAiB,GAAK,KAAK,CAAE,MAAO,SAAS,CACjD,GAAIA,iBAAiB,GAAK,QAAQ,CAAE,MAAO,UAAU,CACrD,MAAO,MAAM,CACjB,CAAC,CAED,MAAO,CACHN,aAAa,CACbE,WAAW,CACXqB,iBAAiB,CACjBE,cAAc,CAAED,kBAAkB,CAAC,CAAC,CACpCpB,eAAe,CACfE,iBACJ,CAAC,CACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}